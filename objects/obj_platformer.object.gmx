<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hitbox</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ID = 0;


//CONSTANTS
grav = 0.5;
movementSpeed = 3;
jumpHeight = -7.5;
totalExtraJumps = 2;

xSpeed = 0;
ySpeed = 0;

didPressJump = false;
extraJumps = totalExtraJumps;

canJump = false;

terminalVelocity = 10;

spr = spr_player_idle;

subimg = 0;
animationSpeed = 0.25;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (x &gt; xprevious) {
    image_xscale = 1;
} else if (x &lt; xprevious) {
    image_xscale = -1;
}

if (x != xprevious) {
    spr = spr_player_run;
} else {
    spr = spr_player_idle;
}

if (y &lt; yprevious) {
    spr = spr_player_jump;
} else if (y &gt; yprevious) {
    spr = spr_player_fall;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///input logic

if (ID == 0) {
    var aDown = keyboard_check(ord("A"));
    var dDown = keyboard_check(ord("D"));
    didPressJump = keyboard_check_pressed(ord("W"));
} else if (ID == 1) {
    var aDown = keyboard_check(vk_left);
    var dDown = keyboard_check(vk_right);
    didPressJump = keyboard_check_pressed(vk_up);
}

xSpeed = (dDown - aDown) * movementSpeed;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///movement logic

var isOnGround = collision_rectangle(x - (sprite_get_width(sprite_index) / 2), y + (sprite_get_height(sprite_index) / 2) - 1, x + (sprite_get_width(sprite_index) / 2), y + (sprite_get_height(sprite_index) / 2) + 1, obj_wall, true, false);
if (isOnGround) {
    canJump = true;
    ySpeed = 0;
    extraJumps = totalExtraJumps;
} else {
    ySpeed += grav;
    //canJump = false; //remove initial jump if not airbourne
}

if (didPressJump &amp;&amp; canJump) {
    show_debug_message("jumped");
    ySpeed = jumpHeight;
    canJump = false;
} else if (didPressJump &amp;&amp; extraJumps &gt; 0) {
    ySpeed = jumpHeight;
    extraJumps -= 1;
}

for (var i = 0; i &lt; abs(xSpeed); i++) {
    var xPrev = x;
    x += sign(xSpeed);
    if (collision_rectangle(x - (sprite_get_width(sprite_index) / 2), y - (sprite_get_height(sprite_index) / 2), x + (sprite_get_width(sprite_index) / 2), y + (sprite_get_height(sprite_index) / 2), obj_wall, true, false)){
        x = xPrev;
        break;
    }
}

for (var i = 0; i &lt; abs(ySpeed); i++) {
    var yPrev = y;
    y += sign(ySpeed);
    if (collision_rectangle(x - (sprite_get_width(sprite_index) / 2), y - (sprite_get_height(sprite_index) / 2), x + (sprite_get_width(sprite_index) / 2), y + (sprite_get_height(sprite_index) / 2), obj_wall, true, false)){
        y = yPrev;
        ySpeed /= 2; //also could be ySpeed = 0;
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
subimg += animationSpeed;

draw_sprite_ext(spr, subimg, x, y, image_xscale, image_yscale, image_angle, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
